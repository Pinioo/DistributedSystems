//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.5
//
// <auto-generated>
//
// Generated from file `Office.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Office;

public class DriverLicenseCaseData implements java.lang.Cloneable,
                                              java.io.Serializable
{
    public CaseInfo caseInfo;

    public String firstname;

    public String lastname;

    public boolean[] examResults;

    public DriverLicenseCaseData()
    {
        this.caseInfo = new CaseInfo();
        this.firstname = "";
        this.lastname = "";
    }

    public DriverLicenseCaseData(CaseInfo caseInfo, String firstname, String lastname, boolean[] examResults)
    {
        this.caseInfo = caseInfo;
        this.firstname = firstname;
        this.lastname = lastname;
        this.examResults = examResults;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        DriverLicenseCaseData r = null;
        if(rhs instanceof DriverLicenseCaseData)
        {
            r = (DriverLicenseCaseData)rhs;
        }

        if(r != null)
        {
            if(this.caseInfo != r.caseInfo)
            {
                if(this.caseInfo == null || r.caseInfo == null || !this.caseInfo.equals(r.caseInfo))
                {
                    return false;
                }
            }
            if(this.firstname != r.firstname)
            {
                if(this.firstname == null || r.firstname == null || !this.firstname.equals(r.firstname))
                {
                    return false;
                }
            }
            if(this.lastname != r.lastname)
            {
                if(this.lastname == null || r.lastname == null || !this.lastname.equals(r.lastname))
                {
                    return false;
                }
            }
            if(!java.util.Arrays.equals(this.examResults, r.examResults))
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::Office::DriverLicenseCaseData");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, caseInfo);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, firstname);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, lastname);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, examResults);
        return h_;
    }

    public DriverLicenseCaseData clone()
    {
        DriverLicenseCaseData c = null;
        try
        {
            c = (DriverLicenseCaseData)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        CaseInfo.ice_write(ostr, this.caseInfo);
        ostr.writeString(this.firstname);
        ostr.writeString(this.lastname);
        ostr.writeBoolSeq(this.examResults);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.caseInfo = CaseInfo.ice_read(istr);
        this.firstname = istr.readString();
        this.lastname = istr.readString();
        this.examResults = istr.readBoolSeq();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, DriverLicenseCaseData v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public DriverLicenseCaseData ice_read(com.zeroc.Ice.InputStream istr)
    {
        DriverLicenseCaseData v = new DriverLicenseCaseData();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<DriverLicenseCaseData> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, DriverLicenseCaseData v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<DriverLicenseCaseData> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(DriverLicenseCaseData.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final DriverLicenseCaseData _nullMarshalValue = new DriverLicenseCaseData();

    /** @hidden */
    public static final long serialVersionUID = 2002105465268914187L;
}
